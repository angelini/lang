use ast::{Expression, Type, Value};

#[pub]
expressions -> Vec<Expression>
  = __ e:ws_delim_exprs __ comment_without_nl? { e }

#[pub]
expression -> Expression
  = fn
  / call
  / assign
  / list
  / map
  / block
  / string_expr
  / nil
  / bool
  / int
  / symbol

call -> Expression
  = i:identifier "(" __ e:comma_delim_exprs __ ")" { Expression::Call(i, e) }

assign -> Expression
  = l:"let"? __ i:typed_ident __ "=" __ e:expression {
    let (ident, typ) = i;
    Expression::Assign(Box::new((l.is_some(), ident, Some(typ), e)))
  }
  / l:"let"? __ i:identifier __ "=" __ e:expression {
    Expression::Assign(Box::new((l.is_some(), i, None, e)))
  }

list -> Expression
  = "[" __ e:comma_delim_exprs __ "]" { Expression::List(e) }

map -> Expression
  = "{" __ e:comma_delim_expr_pairs __ "}" { Expression::Map(e) }

string_expr -> Expression
  = "\"" s:string_with_ws "\"" { Expression::Value(Value::Str(s)) }

nil -> Expression
  = "nil" { Expression::Value(Value::Nil) }

bool -> Expression
  = "true" { Expression::Value(Value::Bool(true)) }
  / "false" { Expression::Value(Value::Bool(false)) }

int -> Expression
  = d:digits { Expression::Value(Value::Int(d)) }

fn -> Expression
  = "fn" __ "(" __ a:comma_delim_typed_idents __ ")" __ "{" __ e:ws_delim_exprs __ "}" {
    Expression::Fn(a, e)
  }

block -> Expression
  = "{" __ e:ws_delim_exprs __ "}" { Expression::Block(e) }

symbol -> Expression
  = i:identifier { Expression::Symbol(i) }

comma_delim_expr_pairs -> Vec<(Expression, Expression)>
  = expr_pair ++ comma_delim

expr_pair -> (Expression, Expression)
  = l:expression __ ":" __ r:expression { (l, r) }

ws_delim_exprs -> Vec<Expression>
  = expression ++ __

comma_delim_exprs -> Vec<Expression>
  = expression ** comma_delim

comma_delim_typed_idents -> Vec<(String, Type)>
  = typed_ident ** comma_delim

typed_ident -> (String, Type)
  = i:identifier __ ":" __ t:type { (i, t) }

type -> Type
  = bool_type
  / int_type
  / str_type
  / list_type
  / map_type
  / fn_type
  / var_type

bool_type -> Type
  = "bool" { Type::Bool }

int_type -> Type
  = "int" { Type::Int }

str_type -> Type
  = "str" { Type::Str }

list_type -> Type
  = "list[" __ t:type __ "]" { Type::List(Box::new(t)) }

map_type -> Type
  = "map[" __ k:type __ "," __ v:type "]" { Type::Map(Box::new((k, v))) }

fn_type -> Type
  = "(" __ a:comma_delim_types __ ")" __ "->" __ o:type { Type::Fn(Box::new((a, o))) }

var_type -> Type
  = [A-Z] { Type::Var(match_str.to_string()) }

comma_delim_types -> Vec<Type>
  = type ** comma_delim

digits -> i64
  = [0-9]+ { match_str.parse().unwrap() }

identifier -> String
  = [a-zA-Z] [a-zA-Z0-9_]* { match_str.to_string() }

comma_delim = __ "," __

__
  = ws ws_delim_comment ws

ws_delim_comment
  = comment ** ws

ws = [ \n]*

comment = "#" comment_string_with_ws "\n"

comment_without_nl = "#" comment_string_with_ws { () }

comment_string_with_ws -> String
  = [^\n]+ { match_str.to_string() }

string_with_ws -> String
  = [a-zA-Z0-9_ ]+ { match_str.to_string() }

string -> String
  = [a-zA-Z0-9_]+ { match_str.to_string() }
