let identity = fn(x: T) { x }

let and = fn (left: bool, right: bool) {
    if(eq(left, true), {
        if(eq(right, true), true, false)
    }, {
        false
    })
}

let or = fn (left: bool, right: bool) {
    if(eq(left, true), {
        true
    }, {
        if(eq(right, true), true, false)
    })
}

let map = fn (coll: list[T], func: (T) -> R) {
    let i = 0
    let result: list[R] = []

    while(lt(i, lsize(coll)), {
        result = push(result, func(lget(coll, i)))
        i = add(i, 1)
    })

    result
}

let filter = fn (coll: list[T], func: (T) -> bool) {
    let i = 0
    let result: list[T] = []

    while(lt(i, lsize(coll)), {
        let item = lget(coll, i)
        if(func(item), {
           result = push(result, item)
           nil
        }, nil)
        i = add(i, 1)
    })

    result
}

let pairs = fn (coll: map[K, V]) {
    let i = 0
    let ks = keys(coll)
    let result: list[tup[K, V]] = []

    while(lt(i, lsize(ks)), {
        let key = lget(ks, i)
        result = push(result, (key, mget(coll, key)))
        i = add(i, 1)
    })

    result
}
